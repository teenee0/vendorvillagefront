import { useState } from 'react';
import { useAuth } from '../../hooks/useAuth';
import axios from '../../api/axiosDefault';
import { isDevelopment } from '../../utils/devUtils';

const TokenTest = () => {
  const { isAuthenticated, user, refreshToken } = useAuth();
  const [testResult, setTestResult] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  if (!isDevelopment()) {
    return null;
  }

  const testApiCall = async () => {
    setIsLoading(true);
    setTestResult('');
    
    try {
      const response = await axios.get('accounts/api/auth/me/', {
        withCredentials: true
      });
      setTestResult(`‚úÖ API –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω: ${JSON.stringify(response.data, null, 2)}`);
    } catch (error) {
      setTestResult(`‚ùå –û—à–∏–±–∫–∞ API –≤—ã–∑–æ–≤–∞: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const testTokenRefresh = async () => {
    setIsLoading(true);
    setTestResult('');
    
    try {
      const success = await refreshToken();
      setTestResult(success ? '‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
    } catch (error) {
      setTestResult(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  if (!isAuthenticated) {
    return (
      <div style={{ padding: '20px', border: '1px solid #ccc', margin: '20px' }}>
        <h3>–¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–æ–≤</h3>
        <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</p>
      </div>
    );
  }

  return (
    <div style={{ padding: '20px', border: '1px solid #ccc', margin: '20px'}}>
      <h3>üîß –¢–µ—Å—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (DEV MODE)</h3>
      <p style={{ fontSize: '12px', color: '#666', marginBottom: '15px' }}>
        ‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      </p>
      <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {isAuthenticated ? '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' : '–ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}</p>
      <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {user?.email || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
      
      <div style={{ marginTop: '20px' }}>
        <button 
          onClick={testApiCall} 
          disabled={isLoading}
          style={{ marginRight: '10px', padding: '10px' }}
        >
          {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–¢–µ—Å—Ç API –≤—ã–∑–æ–≤–∞'}
        </button>
        
        <button 
          onClick={testTokenRefresh} 
          disabled={isLoading}
          style={{ padding: '10px' }}
        >
          {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞'}
        </button>
      </div>
      
      {testResult && (
        <div style={{ 
          marginTop: '20px', 
          padding: '10px', 
          borderRadius: '4px',
          whiteSpace: 'pre-wrap',
          fontSize: '12px'
        }}>
          {testResult}
        </div>
      )}
    </div>
  );
};

export default TokenTest;
