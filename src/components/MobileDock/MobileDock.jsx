import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import styles from './MobileDock.module.css';

const MobileDock = ({ 
  items = [
    { 
      icon: 'üè†', 
      label: '–ì–ª–∞–≤–Ω–∞—è', 
      onClick: () => {},
      isActive: true 
    },
    { 
      icon: 'üì¶', 
      label: '–¢–æ–≤–∞—Ä—ã', 
      onClick: () => {},
      isActive: false 
    },
    { 
      icon: 'üí≥', 
      label: '–ü—Ä–æ–¥–∞–∂–∞', 
      onClick: () => {},
      isActive: false 
    },
    { 
      icon: 'üßæ', 
      label: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 
      onClick: () => {},
      isActive: false 
    },
    { 
      icon: '‚öôÔ∏è', 
      label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 
      onClick: () => {},
      isActive: false 
    }
  ],
  topBoxText = "üìç –ü–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º\n–í—Å–µ –ª–æ–∫–∞—Ü–∏–∏",
  onNavigate = null,
  onLocationClick = null, // –ù–æ–≤—ã–π prop –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏–∏
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ props –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Dock
  className = "",
  spring = { mass: 0.1, stiffness: 150, damping: 12 },
  magnification = 70,
  distance = 200,
  panelHeight = 68,
  dockHeight = 256,
  baseItemSize = 50
}) => {
  const navigate = useNavigate();
  const location = useLocation();
  const [activeRoute, setActiveRoute] = useState('/main');
  const [dockItems, setDockItems] = useState(items);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ location
  useEffect(() => {
    const currentRoute = location.pathname;
    setActiveRoute(currentRoute);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    setDockItems(prevItems => 
      prevItems.map(item => ({
        ...item,
        isActive: item.route === currentRoute
      }))
    );
  }, [location.pathname]);

  // –§—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const handleNavigate = (item) => {
    console.log(`–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫: ${item.label}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    setActiveRoute(item.route || item.label);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–∫-–ø–∞–Ω–µ–ª–∏
    setDockItems(prevItems => 
      prevItems.map(dockItem => ({
        ...dockItem,
        isActive: dockItem === item
      }))
    );
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º onClick —Ñ—É–Ω–∫—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
    if (item.onClick) {
      item.onClick();
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (onNavigate) {
      onNavigate(item);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ–∫-–ø–∞–Ω–µ–ª–∏
  const updateDockConfig = (newConfig) => {
    setDockItems(newConfig);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏–∫–æ–Ω–∫–∏ –≤ –¥–æ–∫
  const addDockItem = (item) => {
    setDockItems(prevItems => [...prevItems, item]);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∏–∑ –¥–æ–∫
  const removeDockItem = (route) => {
    setDockItems(prevItems => prevItems.filter(item => item.route !== route));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–∫–æ–Ω–∫–∏
  const setActiveDockItem = (route) => {
    setDockItems(prevItems => 
      prevItems.map(item => ({
        ...item,
        isActive: item.route === route
      }))
    );
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –∫–ª–∏–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const handleIconClick = (route, event) => {
    const iconElement = event.currentTarget;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–ª–∏–∫–∞
    iconElement.style.transform = 'translateY(-8px) scale(0.95)';
    setTimeout(() => {
      iconElement.style.transform = '';
    }, 150);
    
    handleNavigate(route);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ topBox
  const handleLocationClick = () => {
    console.log('–ö–ª–∏–∫ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ª–æ–∫–∞—Ü–∏–∏');
    
    if (onLocationClick) {
      onLocationClick();
    } else {
      // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
      const business_slug = location.pathname.split('/')[2];
      navigate(`/business/${business_slug}/location-select`);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ props –∏–ª–∏ context

  return (
    <footer className={styles.footer}>
      <div className={styles.container}>
        <div className={styles.topBox} onClick={handleLocationClick}>
          {topBoxText.split('\n').map((line, index) => (
            <React.Fragment key={index}>
              {index === 0 ? (
                <div className={styles.locationName}>{line}</div>
              ) : (
                <div className={styles.locationHint}>{line}</div>
              )}
            </React.Fragment>
          ))}
        </div>
        <div className={styles.dock}>
          {dockItems.map((item, index) => (
            <div
              key={item.route || item.label || index}
              className={`${styles.icon} ${item.isActive ? styles.active : ''}`}
              onClick={(e) => handleIconClick(item, e)}
            >
              <div className={styles.iconEmoji}>
                {typeof item.icon === 'string' ? item.icon : item.icon}
              </div>
              <div className={styles.iconLabel}>{item.label}</div>
            </div>
          ))}
        </div>
      </div>
    </footer>
  );
};

export default MobileDock;
