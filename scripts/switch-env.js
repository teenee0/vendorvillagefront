#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/switch-env.js [dev|prod]
 */

const fs = require('fs');
const path = require('path');

const configPath = path.join(__dirname, '../src/config/environment.js');

const environments = {
  dev: 'development',
  prod: 'production'
};

const targetEnv = process.argv[2];

if (!targetEnv || !environments[targetEnv]) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/switch-env.js [dev|prod]');
  console.log('  dev  - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ development');
  console.log('  prod - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ production');
  process.exit(1);
}

const targetEnvironment = environments[targetEnv];

try {
  let configContent = fs.readFileSync(configPath, 'utf8');
  
  // –ó–∞–º–µ–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envRegex = /const getEnvironment = \(\) => \{[\s\S]*?return '([^']+)';/;
  const match = configContent.match(envRegex);
  
  if (match) {
    const currentEnv = match[1];
    configContent = configContent.replace(
      envRegex,
      `const getEnvironment = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vite
  if (import.meta.env.VITE_APP_ENV) {
    return import.meta.env.VITE_APP_ENV;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º Vite
  if (import.meta.env.DEV) {
    return 'development';
  }
  
  if (import.meta.env.PROD) {
    return 'production';
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ${targetEnvironment}
  return '${targetEnvironment}';`
    );
    
    fs.writeFileSync(configPath, configContent);
    console.log(`‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: ${targetEnvironment}`);
    console.log(`üìù –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${configPath}`);
  } else {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é getEnvironment –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    process.exit(1);
  }
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
  process.exit(1);
}
